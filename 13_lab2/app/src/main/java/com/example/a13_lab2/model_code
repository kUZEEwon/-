/***** 모델 학습 및 변환 *****/
//데이터 및 모델 구성하기
import tensorflow as tf

mnist = tf.keras.datasets.mnist
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train, x_test = x_train / 255.0, x_test / 255.0

x_train_4d = x_train.reshape(-1,28,28,1)
x_test_4d = x_test.reshape(-1,28,28,1)

cnn_model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32,(3,3), activation ='relu',input_shape=(28,28,1)),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(64,(3,3), activation ='relu'),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(64,(3,3), activation ='relu'),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation ='relu'),
    tf.keras.layers.Dense(10, activation='softmax')])


//모델 학습하기
cnn_model.compile(optimizer='adam',
                 loss='sparse_categorical_crossentropy',
                 metrics=['accuracy'])
cnn_model.fit(x_train_4d, y_train, epochs=5)

//모델 변환 및 저장하기
converter = tf.lite.TFLiteConverter.from_keras_model(cnn_model)
tflite_model = converter.convert()

with open('./keras_model_cnn.tflite','wb') as f:
    f.write(tflite_model)